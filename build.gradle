buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/plugins-release/' }
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.3.RELEASE")
        classpath 'com.bmuschko:gradle-docker-plugin:3.4.4'
        //classpath ("org.liquibase:liquibase-gradle-plugin:1.2.4")
    }
}

//apply plugin: 'org.liquibase.gradle'
apply plugin: 'com.bmuschko.docker-remote-api'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

bootJar {
    baseName = 'gs-spring-boot'
    version =  '0.1.0'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework:spring-web")
    //compile('org.liquibase:liquibase-core')
    compile("org.postgresql:postgresql:42.2.1")
    compile("commons-beanutils:commons-beanutils:1.9.3")
    compile("org.modelmapper:modelmapper:2.3.2")
    compile('com.google.guava:guava:27.1-jre')
    compileOnly ("org.projectlombok:lombok:1.16.16")
    testCompile("org.springframework.boot:spring-boot-starter-data-jpa")
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('junit:junit:4.12')
    testCompile('org.codehaus.groovy:groovy-all')
    testCompile 'org.spockframework.spock:spock-core:spock-1.3'
    testCompile 'org.spockframework.spock:spock-spring:spock-1.3'
    testCompile 'com.thedeanda:lorem:2.1'
    testCompile 'org.fluttercode.datafactory:datafactory:0.8'

}

// Import task types
import com.bmuschko.gradle.docker.tasks.image.*
import com.bmuschko.gradle.docker.tasks.container.*

// Use task types
task pullPostgresImage(type: DockerPullImage) {
    repository = 'postgres'
    tag = '9.4'
}

task createPostgresContainer(type: DockerCreateContainer) {
    onError { exception ->
        if (!exception.message.contains('is already in use by container')) // ignore exception if container does not exist otherwise throw it
            throw exception
    }
    dependsOn pullPostgresImage
    targetImageId { pullPostgresImage.getImageId() }
    withEnvVar('POSTGRES_PASSWORD', 'postgres')
    withEnvVar('POSTGRES_USER', 'postgres')
    withEnvVar('POSTGRES_DB', 'alamobot')
    portBindings = ['5432:5432']
    //envVars = ['POSTGRES_PASSWORD:postgres', 'POSTGRES_USER:postgres', 'POSTGRES_DB:alamobot']
    containerName = 'postgres-alamobot'
//    doFirst{
//        if (removeContainersOnExit && createEgaisappContainer.didWork){
//            targetContainerId { createEgaisappContainer.containerName }
//            println "Delete created egaisapp container"
//            onError { exception ->
//                if (!exception.message.contains('No such container')) // ignore exception if container does not exist otherwise throw it
//                    throw exception
//            }
//        }
//    }
}

task startPostgresContainer(type: DockerStartContainer) {
    dependsOn createPostgresContainer
    targetContainerId { 'postgres-alamobot' }
}

task stopPostgresContainer(type: DockerStopContainer) {
    onError { exception ->
        if ( exception.message != null && !exception.message.contains('Cannot invoke method')) // ignore exception if container does not exist otherwise throw it
            throw exception
    }
    targetContainerId { 'postgres-alamobot' }
}

task removePostgresContainer(type: DockerRemoveContainer) {
    onError { exception ->
        if (!exception.message.contains('No such container')) // ignore exception if container does not exist otherwise throw it
            throw exception
    }
    targetContainerId { 'postgres-alamobot' }
}

//task refreshPostgresContainer(type: DockerRemoveContainer) {
//    targetContainerId { 'postgres-alamobot' }
//}

def buildAliases = [
        'refreshPostgresContainer' : ['stopPostgresContainer', 'removePostgresContainer', 'startPostgresContainer']
]
def expandedTaskList = []

gradle.startParameter.taskNames.each {
    expandedTaskList << (buildAliases[it] ? buildAliases[it] : it)
}

gradle.startParameter.taskNames = expandedTaskList.flatten()
